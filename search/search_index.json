{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#motivation","title":"Motivation","text":"<p>While making a game, I simply wanted some UI particles. The best module I found was UIParticle, but it was lacking features that I needed to make nice-looking and advanced particles.</p> <p>I ended up taking a few hours to make a better module, and this EmitYourParticles is the result. It's surprisingly capable with what it can do!</p> <p>I have optimizations and improvements in mind and depending on the reaction this gets, I might add them (give a \u2764 to the DevForum post).</p>"},{"location":"#showcase","title":"Showcase","text":"Your browser does not support playing this Video    Green Squares!      Your browser does not support playing this Video    Images!"},{"location":"#feature-list","title":"Feature list","text":"<p>I aimed make the behaviour made by EmitYourParticle emitters replicate the normal particle emitters. Here are some settings:</p> <ul> <li>Transparency/color</li> <li>Acceleration</li> <li>Drag</li> <li>Spread</li> <li>Lifetime</li> <li>Rotation</li> <li>Emit Shape (Emit from an area or point)</li> <li>and many more. Check out the usage tab to see a full list!</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#method-1","title":"Method 1","text":"<p>Simply download the model's .rbxm file for the module and drag it in Roblox studio. Then move it to ReplicatedStorage or whereever your want.</p> <p></p>"},{"location":"installation/#method-2","title":"Method 2","text":"<p>If you don't want to download it, then you can get it through the marketplace. Then you can open it through the toolbox and use it from there.</p> <p></p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#particle-emitter","title":"Particle Emitter","text":"Construction<pre><code>local emitYourParticle = require('Module Path Here') --(1)!\n\nlocal ParticleEmitter = emitYourParticle.newEmitter(GuiObject) --(2)!\n</code></pre> <ol> <li>Replace this with your module's path. Remove the single quotes.</li> <li>Put your emitter's GUI object here.</li> </ol>"},{"location":"usage/#properties","title":"Properties","text":"<p>Note</p> <p>All of these are read-only. Only index when reading the properties. Set the properties using methods.</p> Property Name Description Default GuiObject <code>GuiObject</code> The particle emitter's GUI Object <code>GuiObject</code> TemplateParticle <code>GuiObject</code> The particle emitter's particle <code>nil</code> Particles <code>{ Particle2D }</code> An array of active particles <code>{ }</code> PropertyTransitions <code>{ PropertyTransition }</code> An array of active property transitions <code>nil</code> AllPropertiesSet <code>Boolean</code> True if every <code>ParticleEmitter:ApplyDefaultProperties()</code> has been called <code>false</code> DoUpdateSize <code>Boolean</code> True if the <code>Scale</code> property is set and the NumberSequence is not a fixed number <code>false</code> Rate <code>Number</code> Particles emitted every second <code>5</code> RateTick <code>Number</code> A number from <code>0</code> to <code>1/Rate</code> that ticks up with the time and resets everytime it reaches <code>1/Rate</code>. <code>0</code> Speed <code>NumberRange</code> A range of speeds that determine the initial speed of a particle. Pixels/Second <code>[30 - 70]</code> RotationSpeed <code>NumberRange</code> A range of rotation speeds in full rotations every second <code>0</code> Rotation <code>NumberRange</code> A range of starting rotations of a particle. <code>0</code> Lifetime <code>NumberRange</code> A range of lifetimes in seconds which determine the time the particle will last. <code>[5 - 10]</code> SpreadAngle <code>NumberRange</code> A range of angles in degrees that the particle's initial velocity direction will be. <code>0</code> EmitShape <code>'area' or 'point'</code> If the EmitShape is 'area' then the emitter will emit throughout the emitter, if it is 'point' then it will emit at the TemplateParticle's position <code>'point'</code> Acceleration <code>Vector2</code> The acceleration, in pixels/second^2, every particle will have. <code>[0, 0]</code> Drag <code>Number</code> The time it takes for a particle to reach half its velocity. <code>0</code> Scale <code>NumberSequence</code> The way the scale will change over a particle's lifetime. <code>NumberSequence.new(1, 1)</code>"},{"location":"usage/#methods","title":"Methods","text":"<p>Note</p> <p>Most methods are chainable.</p>"},{"location":"usage/#setemitterparticle","title":"SetEmitterParticle","text":"<code>self</code> ParticleEmiter:SetEmitterParticle( <code>GuiObject:</code> <code>GuiObject</code> ) Sets the GUI object as the template particle. Property transitions are checked for compatibility and deleted if they are incompatible. All particles will be cleared. Example<pre><code>local particleObject = script.Parent.Frame\n\nParticleEmitter:SetEmitterParticle(particleObject)\n</code></pre>"},{"location":"usage/#setemitterrate","title":"SetEmitterRate","text":"<code>self</code> ParticleEmiter:SetEmitterRate( <code>New Rate:</code> <code>Number</code> ) Sets the speed particles are emitted at emissions per second. Example<pre><code>ParticleEmitter:SetEmitterRate(15)\n</code></pre>"},{"location":"usage/#setemissionshape","title":"SetEmissionShape","text":"<code>self</code> ParticleEmiter:SetEmissionShape( <code>New Shape:</code> <code>\"area\" | \"point\"</code> ) Sets the way the first position of a particle is determined. Read EmitShape property for more info. Example<pre><code>ParticleEmitter:SetEmissionShape('Point')\n</code></pre>"},{"location":"usage/#setspeed","title":"SetSpeed","text":"<code>self</code> ParticleEmiter:SetSpeed( <code>New Speed:</code> <code>Number</code> ) Sets the inital speed of a particle. <code>self</code> ParticleEmiter:SetSpeed( <code>Minimum Speed:</code> <code>Number</code>, <code>Maximum Speed:</code> <code>Number</code> ) Sets the range of speeds that will be the initial speed of a particle. Example<pre><code>ParticleEmitter:SetSpeed(5, 15)\n</code></pre>"},{"location":"usage/#setrotationspeed","title":"SetRotationSpeed","text":"<code>self</code> ParticleEmiter:SetRotationSpeed( <code>Rotation Speed:</code> <code>Number</code> ) Sets the speed particles rotate. Rotations per second. <code>self</code> ParticleEmiter:SetRotationSpeed( <code>Minimum Rotation Speed:</code> <code>Number</code>, <code>Maximum  Rotation Speed:</code> <code>Number</code> ) Sets the range of speeds at which the particles will rotate. Example<pre><code>ParticleEmitter:SetRotationSpeed(.2, .6)\n</code></pre>"},{"location":"usage/#setrotation","title":"SetRotation","text":"<code>self</code> ParticleEmiter:SetRotation( <code>Rotation:</code> <code>Number</code> ) Sets the rotation particles will start at. <code>self</code> ParticleEmiter:SetRotation( <code>Minimum Rotation:</code> <code>Number</code>, <code>Maximum Rotation:</code> <code>Number</code> ) Sets the range of rotations particles will start at. Example<pre><code>ParticleEmitter:SetRotation(0, 360)\n</code></pre>"},{"location":"usage/#setlifetime","title":"SetLifetime","text":"<code>self</code> ParticleEmiter:SetLifetime( <code>Lifetime:</code> <code>Number</code> ) Sets the lifetime which is the amount of time the particles will be active until they get deleted. <code>self</code> ParticleEmiter:SetLifetime( <code>Minimum Lifetime:</code> <code>Number</code>, <code>Maximum Lifetime:</code> <code>Number</code> ) Sets the range of lifetimes a particle will have. Example<pre><code>ParticleEmitter:SetLifetime(.2, 1)\n</code></pre>"},{"location":"usage/#setspreadangle","title":"SetSpreadAngle","text":"<code>self</code> ParticleEmiter:SetSpreadAngle( <code>Spread Angle:</code> <code>Number</code> ) Sets the direction of a particle's velocity. <code>self</code> ParticleEmiter:SetSpreadAngle( <code>Minimum Spread Angle:</code> <code>Number</code>, <code>Maximum Spread Angle:</code> <code>Number</code> ) Sets the range of a particle's velocity direction. Example<pre><code>ParticleEmitter:SetSpreadAngle(75, 105)\n</code></pre>"},{"location":"usage/#setacceleration","title":"SetAcceleration","text":"<code>self</code> ParticleEmiter:SetAcceleration( <code>New Acceleration:</code> <code>Vector2</code> ) <code>self</code> Sets the speed at which the velocity of a particle will change. Example<pre><code>ParticleEmitter:SetAcceleration(Vector2.new())\n</code></pre>"},{"location":"usage/#setdrag","title":"SetDrag","text":"<code>self</code> ParticleEmiter:SetDrag( <code>Drag:</code> <code>Number</code> ) Sets the time that it takes for a particle to reach half of its velocity. Example<pre><code>ParticleEmitter:SetDrag(4)\n</code></pre>"},{"location":"usage/#setscale","title":"SetScale","text":"<code>self</code> ParticleEmiter:SetScale( <code>New Scale:</code> <code>NumberSequence</code> ) Sets the transition of the particle's size. Example<pre><code>local scaleNumberSequence = NumberSequence.new({\n    NumberSequenceKeypoint.new(0, .5),\n    NumberSequenceKeypoint.new(1, 1)\n}) \n\nParticleEmitter:SetScale(scaleNumberSequence)\n</code></pre>"},{"location":"usage/#setpropertytransition","title":"SetPropertyTransition","text":"<code>self</code> ParticleEmiter:SetPropertyTransition( <code>Property Name:</code> <code>string</code>, <code>Transition Sequence:</code> <code>NumberSequence or ColorSequence</code> ) Sets the transition of one of the particle's property. Property name must exist for the current particle template. Example<pre><code>local bgColorSequence = ColorSequence.new({\n    ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 50, 85)),\n    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))\n})\n\nParticleEmitter:SetPropertyTransition('BackgroundColor',  bgColorSequence)\n</code></pre>"},{"location":"usage/#getpropertytransition","title":"GetPropertyTransition","text":"<code>PropertyTransition</code> ParticleEmiter:GetPropertyTransition( <code>Property Name:</code> <code>string</code> ) Returns a property transition from the property name given. Example<pre><code>ParticleEmitter:GetPropertyTransition('BackgroundColor')\n</code></pre>"},{"location":"usage/#emit","title":"Emit","text":"<code>self</code> :Emit( <code>Emit Count:</code> <code>Number</code> ) Emits the number of particles. <code>self</code> :Emit(  ) Emits a particle. Example<pre><code>ParticleEmitter:Emit(5)\n</code></pre>"},{"location":"usage/#clearparticles","title":"ClearParticles","text":"<code>void</code> :ClearParticles( ) Removes every particle Example<pre><code>ParticleEmitter:ClearParticles()\n</code></pre>"},{"location":"usage/#clearpropertytransitions","title":"ClearPropertyTransitions","text":"<code>void</code> :ClearPropertyTransitions( ) Removes every property transition. Example<pre><code>ParticleEmitter:ClearPropertyTransitions()\n</code></pre>"},{"location":"usage/#destroy","title":"Destroy","text":"<code>void</code> :Destroy( ) Destroys the particle emitter by destroying all the particles and some other stuff. Example<pre><code>ParticleEmitter:Destroy()\n</code></pre>"},{"location":"usage/#update","title":"Update","text":"<code>void</code> :Update( <code>Delta Time:</code> <code>Number</code> ) Updates every particle's position. Runs for every frame the particle emitter has a particle template. Example<pre><code>ParticleEmitter:Update(10000) -- i don't really know why you would want to do this\n</code></pre>"},{"location":"usage/#events","title":"Events","text":"Event Name Arguments Description ParticleCreated <code>Particle:</code> <code>Particle</code> Fired every time a particle is emitted ParticleUpdated <code>Particle:</code> <code>Particle</code>, <code>DeltaTime:</code> <code>Number</code>, <code>LifetimeProgres:</code> <code>Number</code> Fired every frame for every particle on the screen <p>Note</p> <p>Lifetime Progress is a number from <code>0</code> to <code>1</code> which is the particle's age divided by the particle's determined lifetime</p>"},{"location":"usage/#particle","title":"Particle","text":""},{"location":"usage/#properties_1","title":"Properties","text":"Property Name Description VelocityDirection <code>Vector2</code> The initial direction of the determined velocity. Velocity <code>Vector2</code> The current velocity of the particle in pixels. Position <code>Vector2</code> The current position of the particle in pixels. CurrentAge <code>Number</code> The amount of time the particle has been alive. DeterminedLifetime <code>Number</code> The determined amount of time time until the particle will be destroyed. DeterminedRotationSpeed <code>Number</code> The determined speed in rotations per second of the particle. GuiObject <code>GuiObject</code> The particle's gui object. EmittedBy <code>ParticleEmitter</code> The particle's parent emitter. <p>Note</p> <p>Determined essentially just means its a single random number from a certain range.</p>"},{"location":"usage/#methods_1","title":"Methods","text":""},{"location":"usage/#update_1","title":"Update","text":"<code>void</code> :Update( <code>Delta Time:</code> <code>Number</code> ) Updates the particle's position. Ran every frame for the particle's lifetime. Example<pre><code>Particle:Update(10000) -- i don't really know why you would do this either\n</code></pre>"},{"location":"usage/#destroy_1","title":"Destroy","text":"<code>void</code> :Destroy( ) Destroys the particle, removes it from the Particles table of the emitter, and removes references. Does this automatically on lifetime end. Example<pre><code>Particle:Destroy()\n</code></pre>"}]}